---
layout: post
title:  "마이크로서비스 - 배포를 자주해서 생기는 문제"
date:   2018-10-12
description: 모노리스틱스환경에서 마이크로서비스로 전환하게 되면 배포가 쉽기 때문에 자주하게됩니다. 그와 동시에 모노리스틱스환경에서는 큰 문제 안되던일이 문제로 바뀌기도합니다. 마이크로서비스의 배포에 대해 이야기합니다.
---
매주 목요일 오후 3시는 주 단위로 변경한 내용을 반영하는 배포 시간이었습니다. 2일 정도 걸리는 통합 테스트가 끝난 업데이트를 배포하는 긴장되는날입니다. 이후 심각한 버그가 발견되거나 성능저하가 발견되면 구버전을 다시 배포하고 원인을 찾습니다. 하지만 마이크로서비스는 서비스 하나의 코드가 30~60줄인 경우도 많고 해당 서비스만 배포하면 되기 때문에 업데이트가 심한 서비스의 경우 하루에 2~3회 배포할때도 있습니다. 반면 인증과 같은 서비스의 배포주기는 8개월에서 12개월 정도입니다. 모노리스틱스에서는 모든 서비스의 업데이트/배포주기가 같지만 마이크로서비스에서는 모든 서비스의 업데이트/배포주기가 다릅니다. 이것은 서비스관점에서는 환상적인 비지니스 변화를 수용하는 서비스 제공을 달성하지만 개발비용관점에서는 통합 테스트의 어려움과 가장 배포주기가 짧은 서비스가 전체 서비스의 영향을 주는 큰 리스크가 됩니다. 그렇다고 모노리스틱스 시절 처럼 모든 서비스의 버전과 배포주기를 맞추는것은 답이 아닙니다. 빠른 오류 발견과 마이크로서비스 단위의 버그 픽스가 가능하도록 환경을 구성하는것이 중요합니다.

# 마이크로서비스의 오류 발견 방법
마이크로서비스는 크게 API-Gateway와 Event 방식으로 구성됩니다. API 방식에서는 리턴되는 HTTP의 응답코드로 Event방식에서는 Produce/Consume 비율로 오류 발생을 알 수 있습니다. 우선 API 부터 살펴보겠습니다.

200이 아닌 코드가 리턴될때 오류가 있다고 추정할 수 있습니다. 하지만 일정량의 200이 아닌경우는 발생할 수 있습니다. 인스턴스 갯수가 바뀌는 과정에서 이전 인스턴스에 라우팅을 하는 경우나 로직 문제가 아닌 일시적인 하드웨어 상황에 때문에 200이 아닌 경우가 있습니다. 따라서 모든 요청의 응답이 200이냐 아니냐가 아닌 평소에 비해 200이 아닌 비율이 얼마나 되냐로 판단해야합니다. Netflix OSS를 쓴다면 단순히 서킷 브레이커 패턴만 정의하면 해결이 가능한 요소도 있으나 안타깝게도 MSA에서는 만능 총알 같은 솔루션이 없기 때문에 해당 OSS 없이도 오류를 발견할 수 있어야합니다.

이벤트 방식에서는 문제가 생길경우 전현 이벤트를 Produce못하거나 Consume 비율이 낮아져서 큐에 이벤트가 쌓이게 됩니다. 일시적으로는 큐에 있는 이벤트가 있을수 있지만 적정수의 이벤트를 Consume하는 서비스가 있다면 지속적으로 증가하지 않습니다.
